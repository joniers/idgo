// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package idgen

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"thrift_datatype"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = thrift_datatype.GoUnusedProtection__

type IdGenService interface { //**************************************************************************************************
	// 服务接口
	//***************************************************************************************************

	// * 函数名称：getId
	// * 函数功能：获取一个指定类型的ID
	// * @author houjixin
	// * @param long(i64) logIndex 日志索引
	// * @param string caller 调用方的标识
	//  * @param string ext			扩展参数，JSON字符串格式
	//  * @return ResLong 成功获取到ID时，result值为ThriftRes.SUCCESS，value值为获取到的id，
	//  * 					获取失败时，返回各失败的状态描述如下：
	//  * 					（1）id生成器没有处于工作状态，则result返回ThriftRes.SERVER_UNWORKING，value值为 -1
	//  * 					（2）传入参数错误时，则result返回ThriftRes.PARAMETER_ERROR，value值为 -1
	//  * 					（3）id生成器内部获取不到ID时，例如id生成器与redis之间断开连接，则result返回ThriftRes.INNER_ERROR，value值为 -1
	//  * 					（4）内部发送异常时，则result返回ThriftRes.EXCEPTION，value值为 -1
	// *
	//
	// Parameters:
	//  - LogIndex
	//  - Caller
	//  - Ext
	GetId(logIndex int64, caller string, ext string) (r *thrift_datatype.ResLong, err error)
	// * 函数名称：echo
	// * 函数功能：传递一个字符串给Thrift服务器，服务器把这个字符串原封不动的返回
	// * @author houjixin
	// * @param long(i64) logIndex 	日志索引
	// * @param string caller 		调用方的标识，每个模块要调用本模块时都要提供调用方的标识；
	// * @param string srcStr			传递给Thrift服务器的字符串
	// * @param string ext			扩展参数，JSON字符串格式
	//  * @return ResStr 				res中返回操作结果，value中返回字符串
	// *
	//
	// Parameters:
	//  - LogIndex
	//  - Caller
	//  - SrcStr
	//  - Ext
	Echo(logIndex int64, caller string, srcStr string, ext string) (r *thrift_datatype.ResStr, err error)
}

//**************************************************************************************************
// 服务接口
//***************************************************************************************************
type IdGenServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIdGenServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IdGenServiceClient {
	return &IdGenServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIdGenServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IdGenServiceClient {
	return &IdGenServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// * 函数名称：getId
// * 函数功能：获取一个指定类型的ID
// * @author houjixin
// * @param long(i64) logIndex 日志索引
// * @param string caller 调用方的标识
//  * @param string ext			扩展参数，JSON字符串格式
//  * @return ResLong 成功获取到ID时，result值为ThriftRes.SUCCESS，value值为获取到的id，
//  * 					获取失败时，返回各失败的状态描述如下：
//  * 					（1）id生成器没有处于工作状态，则result返回ThriftRes.SERVER_UNWORKING，value值为 -1
//  * 					（2）传入参数错误时，则result返回ThriftRes.PARAMETER_ERROR，value值为 -1
//  * 					（3）id生成器内部获取不到ID时，例如id生成器与redis之间断开连接，则result返回ThriftRes.INNER_ERROR，value值为 -1
//  * 					（4）内部发送异常时，则result返回ThriftRes.EXCEPTION，value值为 -1
// *
//
// Parameters:
//  - LogIndex
//  - Caller
//  - Ext
func (p *IdGenServiceClient) GetId(logIndex int64, caller string, ext string) (r *thrift_datatype.ResLong, err error) {
	if err = p.sendGetId(logIndex, caller, ext); err != nil {
		return
	}
	return p.recvGetId()
}

func (p *IdGenServiceClient) sendGetId(logIndex int64, caller string, ext string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IdGenServiceGetIdArgs{
		LogIndex: logIndex,
		Caller:   caller,
		Ext:      ext,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdGenServiceClient) recvGetId() (value *thrift_datatype.ResLong, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getId failed: invalid message type")
		return
	}
	result := IdGenServiceGetIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// * 函数名称：echo
// * 函数功能：传递一个字符串给Thrift服务器，服务器把这个字符串原封不动的返回
// * @author houjixin
// * @param long(i64) logIndex 	日志索引
// * @param string caller 		调用方的标识，每个模块要调用本模块时都要提供调用方的标识；
// * @param string srcStr			传递给Thrift服务器的字符串
// * @param string ext			扩展参数，JSON字符串格式
//  * @return ResStr 				res中返回操作结果，value中返回字符串
// *
//
// Parameters:
//  - LogIndex
//  - Caller
//  - SrcStr
//  - Ext
func (p *IdGenServiceClient) Echo(logIndex int64, caller string, srcStr string, ext string) (r *thrift_datatype.ResStr, err error) {
	if err = p.sendEcho(logIndex, caller, srcStr, ext); err != nil {
		return
	}
	return p.recvEcho()
}

func (p *IdGenServiceClient) sendEcho(logIndex int64, caller string, srcStr string, ext string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("echo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IdGenServiceEchoArgs{
		LogIndex: logIndex,
		Caller:   caller,
		SrcStr:   srcStr,
		Ext:      ext,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdGenServiceClient) recvEcho() (value *thrift_datatype.ResStr, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "echo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "echo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "echo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "echo failed: invalid message type")
		return
	}
	result := IdGenServiceEchoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type IdGenServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IdGenService
}

func (p *IdGenServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IdGenServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IdGenServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIdGenServiceProcessor(handler IdGenService) *IdGenServiceProcessor {

	self4 := &IdGenServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["getId"] = &idGenServiceProcessorGetId{handler: handler}
	self4.processorMap["echo"] = &idGenServiceProcessorEcho{handler: handler}
	return self4
}

func (p *IdGenServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type idGenServiceProcessorGetId struct {
	handler IdGenService
}

func (p *idGenServiceProcessorGetId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IdGenServiceGetIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IdGenServiceGetIdResult{}
	var retval *thrift_datatype.ResLong
	var err2 error
	if retval, err2 = p.handler.GetId(args.LogIndex, args.Caller, args.Ext); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getId: "+err2.Error())
		oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type idGenServiceProcessorEcho struct {
	handler IdGenService
}

func (p *idGenServiceProcessorEcho) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IdGenServiceEchoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IdGenServiceEchoResult{}
	var retval *thrift_datatype.ResStr
	var err2 error
	if retval, err2 = p.handler.Echo(args.LogIndex, args.Caller, args.SrcStr, args.Ext); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: "+err2.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("echo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - LogIndex
//  - Caller
//  - Ext
type IdGenServiceGetIdArgs struct {
	LogIndex int64  `thrift:"logIndex,1" json:"logIndex"`
	Caller   string `thrift:"caller,2" json:"caller"`
	Ext      string `thrift:"ext,3" json:"ext"`
}

func NewIdGenServiceGetIdArgs() *IdGenServiceGetIdArgs {
	return &IdGenServiceGetIdArgs{}
}

func (p *IdGenServiceGetIdArgs) GetLogIndex() int64 {
	return p.LogIndex
}

func (p *IdGenServiceGetIdArgs) GetCaller() string {
	return p.Caller
}

func (p *IdGenServiceGetIdArgs) GetExt() string {
	return p.Ext
}
func (p *IdGenServiceGetIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGenServiceGetIdArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LogIndex = v
	}
	return nil
}

func (p *IdGenServiceGetIdArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Caller = v
	}
	return nil
}

func (p *IdGenServiceGetIdArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ext = v
	}
	return nil
}

func (p *IdGenServiceGetIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGenServiceGetIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logIndex", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:logIndex: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LogIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:logIndex: ", p), err)
	}
	return err
}

func (p *IdGenServiceGetIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("caller", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:caller: ", p), err)
	}
	if err := oprot.WriteString(string(p.Caller)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.caller (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:caller: ", p), err)
	}
	return err
}

func (p *IdGenServiceGetIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ext", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ext: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ext (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ext: ", p), err)
	}
	return err
}

func (p *IdGenServiceGetIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGenServiceGetIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IdGenServiceGetIdResult struct {
	Success *thrift_datatype.ResLong `thrift:"success,0" json:"success,omitempty"`
}

func NewIdGenServiceGetIdResult() *IdGenServiceGetIdResult {
	return &IdGenServiceGetIdResult{}
}

var IdGenServiceGetIdResult_Success_DEFAULT *thrift_datatype.ResLong

func (p *IdGenServiceGetIdResult) GetSuccess() *thrift_datatype.ResLong {
	if !p.IsSetSuccess() {
		return IdGenServiceGetIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IdGenServiceGetIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IdGenServiceGetIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGenServiceGetIdResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &thrift_datatype.ResLong{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IdGenServiceGetIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGenServiceGetIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IdGenServiceGetIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGenServiceGetIdResult(%+v)", *p)
}

// Attributes:
//  - LogIndex
//  - Caller
//  - SrcStr
//  - Ext
type IdGenServiceEchoArgs struct {
	LogIndex int64  `thrift:"logIndex,1" json:"logIndex"`
	Caller   string `thrift:"caller,2" json:"caller"`
	SrcStr   string `thrift:"srcStr,3" json:"srcStr"`
	Ext      string `thrift:"ext,4" json:"ext"`
}

func NewIdGenServiceEchoArgs() *IdGenServiceEchoArgs {
	return &IdGenServiceEchoArgs{}
}

func (p *IdGenServiceEchoArgs) GetLogIndex() int64 {
	return p.LogIndex
}

func (p *IdGenServiceEchoArgs) GetCaller() string {
	return p.Caller
}

func (p *IdGenServiceEchoArgs) GetSrcStr() string {
	return p.SrcStr
}

func (p *IdGenServiceEchoArgs) GetExt() string {
	return p.Ext
}
func (p *IdGenServiceEchoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGenServiceEchoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LogIndex = v
	}
	return nil
}

func (p *IdGenServiceEchoArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Caller = v
	}
	return nil
}

func (p *IdGenServiceEchoArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SrcStr = v
	}
	return nil
}

func (p *IdGenServiceEchoArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Ext = v
	}
	return nil
}

func (p *IdGenServiceEchoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGenServiceEchoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logIndex", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:logIndex: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LogIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:logIndex: ", p), err)
	}
	return err
}

func (p *IdGenServiceEchoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("caller", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:caller: ", p), err)
	}
	if err := oprot.WriteString(string(p.Caller)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.caller (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:caller: ", p), err)
	}
	return err
}

func (p *IdGenServiceEchoArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("srcStr", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:srcStr: ", p), err)
	}
	if err := oprot.WriteString(string(p.SrcStr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.srcStr (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:srcStr: ", p), err)
	}
	return err
}

func (p *IdGenServiceEchoArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ext", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ext: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ext (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ext: ", p), err)
	}
	return err
}

func (p *IdGenServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGenServiceEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IdGenServiceEchoResult struct {
	Success *thrift_datatype.ResStr `thrift:"success,0" json:"success,omitempty"`
}

func NewIdGenServiceEchoResult() *IdGenServiceEchoResult {
	return &IdGenServiceEchoResult{}
}

var IdGenServiceEchoResult_Success_DEFAULT *thrift_datatype.ResStr

func (p *IdGenServiceEchoResult) GetSuccess() *thrift_datatype.ResStr {
	if !p.IsSetSuccess() {
		return IdGenServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IdGenServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IdGenServiceEchoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGenServiceEchoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &thrift_datatype.ResStr{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IdGenServiceEchoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGenServiceEchoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IdGenServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGenServiceEchoResult(%+v)", *p)
}
